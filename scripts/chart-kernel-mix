#!/usr/bin/env python
import matplotlib.pyplot as plt
import seaborn as sns
import os
from scipy.spatial.distance import pdist
from scipy.spatial.distance import squareform
import sys
import numpy as np
import utils

def shorten_string(s, lim=40):
    if len(s) > lim:
        return s[:lim - 3] + '...'
    return s


kernel_frac = {}
keep = 49


for app in utils.apps:
    batch = utils.get_large_batch_size('a100', app)
    raw_file = utils.get_ncu_raw_file('a100', app, batch)

    print(f'Processing {app}...')

    names, data = utils.read_ncu_raw_file_numpy(
        raw_file,
        ['gpu__time_duration.sum'])

    tot_time = data[:, 0].sum()

    for i, name in enumerate(names):
        if utils.is_gemm(name): name = 'gemm'
        if name not in kernel_frac: kernel_frac[name] = 0
        kernel_frac[name] += data[i, 0] / tot_time


ordered_kerns = list(kernel_frac.keys())
ordered_kerns.sort(key=lambda x: kernel_frac.get(x, 0), reverse=True)
keep_kerns = ordered_kerns[:keep]
other_kerns = ordered_kerns[keep:]

fracs = np.array(
    [kernel_frac[k] / len(utils.apps) for k in keep_kerns] + \
    [sum(kernel_frac[k] for k in other_kerns) / len(utils.apps)])


plt.figure(figsize=(utils.TEXT_WIDTH, 6))
plt.title('Kernel Mix', fontsize=10)

xs = np.arange(len(fracs))

plt.bar(xs + 0.5, fracs)



# plt.xlabel('Opcode')
plt.ylabel('Total Frac. of Normalized App Runtime', fontsize=8)



plt.xticks(
    xs,
    list(map(shorten_string, keep_kerns)) + ['OTHER'],
    rotation=90,
    fontsize=6)

plt.yticks(fontsize=6)

plt.xlim(0, keep + 1)

plt.tight_layout()
os.makedirs('charts', exist_ok=True)
plt.savefig(f'charts/kernel-mix.pdf')
