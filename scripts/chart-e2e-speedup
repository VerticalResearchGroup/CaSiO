#!/usr/bin/env python
import matplotlib.pyplot as plt
import seaborn as sns
import os
from scipy.spatial.distance import pdist
from scipy.spatial.distance import squareform

import numpy as np
import scipy
import utils

colors = plt.rcParams['axes.prop_cycle'].by_key()['color']

apps = utils.apps

WIDTH = 1.0

v100_p100_speedup = 125 / 21.2
a100_v100_speedup = 312 / 125

v100_p100_mem = 900 / 720
a100_v100_mem = 1555 / 900

stats = [
    'gpu__time_duration.sum',
    'inst_executed'
]

fig = plt.figure(figsize=(utils.COL_WIDTH, 2))
axs = fig.subplots(1, 1)

labels = []

p100 = []
v100 = []
a100 = []

for i, app in enumerate(apps):
    prettyname = utils.app_pretty_names[app]
    labels.append(prettyname)

    throughputs = {
        plat: utils.throughput(plat, app, utils.get_large_batch_size(plat, app))
        for plat in utils.plats
    }

    p100.append(1)
    v100.append(throughputs['v100'] / throughputs['p100'])
    a100.append(throughputs['a100'] / throughputs['v100'])

    print(f'{prettyname.ljust(15)}: {v100[-1]:.2f} {a100[-1]:.2f}')

p100 = np.array(p100)
v100 = np.array(v100)
a100 = np.array(a100)
labels = np.array(labels)

idxs = v100.argsort()
p100 = p100[idxs]
v100 = v100[idxs]
a100 = a100[idxs]
labels = labels[idxs]

p100 = np.append(p100, scipy.stats.mstats.gmean(p100))
v100 = np.append(v100, scipy.stats.mstats.gmean(v100))
a100 = np.append(a100, scipy.stats.mstats.gmean(a100))
labels = np.append(labels, 'Geo. Mean')

xs = np.arange(len(apps) + 1) * 3

print(v100)
print(a100)

#plot peak speedups
axs.axhline(y=v100_p100_speedup, color=colors[0], linestyle='--', linewidth=1, zorder=10)
axs.axhline(y=a100_v100_speedup, color=colors[1], linestyle='--', linewidth=1, zorder=10)

axs.axhline(y=v100_p100_mem, color=colors[0], linestyle=':', linewidth=1, zorder=10)
axs.axhline(y=a100_v100_mem, color=colors[1], linestyle=':', linewidth=1, zorder=10)


# axs.bar(xs + 0, p100, width=WIDTH, label='P100')
axs.bar(xs + 0, v100, width=WIDTH, label='V100 / P100', zorder=100)
axs.bar(xs + 1, a100, width=WIDTH, label='A100 / V100', zorder=100)



plt.xticks(xs + 0.5, labels, rotation=45, ha='right', fontsize=6)
plt.xlim([-WIDTH / 2, max(xs) + 2.5 - WIDTH])
plt.ylim([0, 7.5])
plt.yticks(fontsize=6)

# plt.xlabel('Application', fontsize=8)
plt.ylabel('Speedup', fontsize=8)
plt.title('Generational Performance Gains', fontsize=10)
plt.legend(ncol=2, fontsize=6)
plt.tight_layout()
os.makedirs('charts', exist_ok=True)
plt.savefig('charts/e2e-speedup.pdf')
