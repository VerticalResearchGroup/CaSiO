#!/usr/bin/env python
import matplotlib.pyplot as plt
import seaborn as sns
import os
import sys
from scipy.spatial.distance import pdist
from scipy.spatial.distance import squareform
from matplotlib.patches import Rectangle

import numpy as np
import scipy
import utils
import bins


colors = plt.rcParams['axes.prop_cycle'].by_key()['color']

colors = colors * 2

print(f'# colors = {len(colors)}')

plat = sys.argv[1]

# fig = plt.figure()
fig, ax = plt.subplots(figsize=(utils.TEXT_WIDTH, 2.5))

labels = []

for i, app in enumerate(utils.apps):
    batch = utils.get_large_batch_size(plat, app)
    raw_file = utils.get_ncu_raw_file(plat, app, batch)
    prettyname = utils.app_pretty_names[app]
    labels.append(prettyname)

    if not os.path.exists(raw_file):
        print(f' {raw_file} does not exist')
        print()
        continue

    names, data = utils.read_ncu_raw_file_numpy(
        raw_file,
        [
            'gpu__time_duration.sum',
            'launch__thread_count',
            'sm__throughput.avg.pct_of_peak_sustained_elapsed',
            'gpu__dram_throughput.avg.pct_of_peak_sustained_elapsed',
        ])

    ktimes = data[:, 0]
    tt = ktimes.sum()
    kstats = data[:, 1:4]

    run_lengths = []
    run_bins = []
    cur_bin = None

    is_gemm = []
    gemm_lengths = []
    cur_gemm = None

    for ki in range(len(names)):
        this_bin = bins.get_bin_str_vec(kstats[ki])

        if this_bin == cur_bin:
            run_lengths[-1] += ktimes[ki] / tt
        else:
            run_lengths.append(ktimes[ki] / tt)
            run_bins.append(this_bin)
            cur_bin = this_bin

        if utils.is_gemm(names[ki]) == cur_gemm:
            gemm_lengths[-1] += ktimes[ki] / tt
        else:
            gemm_lengths.append(ktimes[ki] / tt)
            is_gemm.append(utils.is_gemm(names[ki]))
            cur_gemm = utils.is_gemm(names[ki])


    ti = 0
    for bin, rl in zip(run_bins, run_lengths):
        bin_idx = bins.bin_str_to_idx[bin]
        ax.add_patch(Rectangle((ti, i*4), rl, 3, lw=1, facecolor=bins.colors[bin_idx]))
        ti += rl


    ti = 0
    for gemm, rl in zip(is_gemm, gemm_lengths):
        if gemm: ax.add_patch(Rectangle((ti, i*4), rl, 0.5, lw=1, facecolor='#000000'))
        ti += rl


plt.xlabel('Fraction of Time', fontsize=8)
# plt.ylabel('Application', fontsize=8)
plt.yticks(np.arange(0, len(utils.apps)) * 4 + 3/2, labels, fontsize=8)
plt.xticks(fontsize=8)
plt.title('Application Snapshots', fontsize=10)
plt.xlim(0, 1.0)
plt.ylim(0, 4 * len(utils.apps) - 1)
# plt.legend(ncol=1, fontsize=6)
plt.tight_layout()
os.makedirs('charts', exist_ok=True)
plt.savefig('charts/app-snap.pdf')



