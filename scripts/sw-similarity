#!/usr/bin/env python
import matplotlib.pyplot as plt
import seaborn as sns
import os
from scipy.spatial.distance import pdist
from scipy.spatial.distance import squareform

import numpy as np
import utils

apps = utils.apps #[:4]

def get_sass_heatmap(sass_file, opcode_map):
    kernels = utils.parse_ncu_sass(sass_file)
    opcodes = utils.ncu_sass_opcodes(kernels)

    all_data = np.array([
        k.to_feature_vector(opcode_map)
        for k in kernels
    ])

    packed_dists = pdist(all_data, 'cosine')
    return all_data, squareform(packed_dists)


cache_file = f'{utils.CASIO}/cache/opcodes.txt'

if os.path.exists(cache_file):
    print(f'Loading opcode map from {cache_file}...')
    all_opcodes = set()
    with open(cache_file, 'r') as f:
        for line in f:
            all_opcodes.add(line.strip())
else:
    print(f'Generating opcode cache file {cache_file}')
    all_opcodes = set()
    for i, app in enumerate(apps):
        batch = utils.get_large_batch_size('a100', app)
        prettyname = utils.app_pretty_names[app]
        print(f'Processing {app}...')
        sass_file = utils.get_ncu_sass_file('a100', app, batch)
        kernels = utils.parse_ncu_sass(sass_file)
        opcodes = utils.ncu_sass_opcodes(kernels)
        all_opcodes = all_opcodes.union(opcodes)

    with open(cache_file, 'w') as f:
        for opcode in all_opcodes:
            print(opcode, file=f)

opcode_map = {op: i for i, op in enumerate(all_opcodes)}

all_data = None

for i, app in enumerate(apps):
    batch = utils.get_large_batch_size('a100', app)
    prettyname = utils.app_pretty_names[app]
    sass_file = utils.get_ncu_sass_file('a100', app, batch)

    # print(f'Processing {app}...')
    data, dists = get_sass_heatmap(sass_file, opcode_map)

    if all_data is None:
        all_data = data
    else:
        all_data = np.vstack((all_data, data))

    rep_list = utils.pick_clusters(dists)
    print(f'{prettyname.ljust(12)}: clusters: {len(rep_list)}')


packed_dists = pdist(all_data, 'cosine')
dists = squareform(packed_dists)


rep_list = utils.pick_clusters(dists)
print(f'All clusters: {len(rep_list)}')

