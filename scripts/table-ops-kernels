#!/usr/bin/env python

import os
import sys
import utils

all_fw_ops = set()
all_kerns = {plat: set() for plat in utils.plats}


print('\\begin{tabular}{l|r|rrr|rrr|rrr|rrr}')
print(f'\\multicolumn{{1}}{{c}}{{}} & \\multicolumn{{1}}{{c}}{{}} & \\multicolumn{{3}}{{c}}{{\\textbf{{Framework}}}} & \\multicolumn{{3}}{{c}}{{\\textbf{{P100}}}} & \\multicolumn{{3}}{{c}}{{\\textbf{{V100}}}} & \\multicolumn{{3}}{{c}}{{\\textbf{{A100}}}} \\\\ \hline')
print(f'\\textbf{{Op Name}} & \\textbf{{ROI (s)}} & ', ' & '.join(['\\textbf{kDyn.}', '\\textbf{Uniq.}', '\\textbf{CU.}']*4), '\\\\')
print('\\hline')
for app in utils.apps:
    optrace_file = utils.get_optrace_file_lb('a100', app)
    if not os.path.exists(optrace_file): continue
    trace = utils.read_optrace(optrace_file)

    if sum(op.accel_time for op in trace) == 0: continue

    unqiue_op_names = set([ op.name for op in trace ])
    prettyname = utils.app_pretty_names[app].replace('_', '\\_')
    all_fw_ops = all_fw_ops.union(unqiue_op_names)
    tot_time = sum(op.accel_time for op in trace)
    cols = [
        prettyname,
        f'{tot_time:.1f}',
        f'{len(trace)/1000:.1f}',
        f'{len(unqiue_op_names)}',
        f'{len(all_fw_ops)}'
    ]

    for plat in utils.plats:
        batch = utils.get_large_batch_size(plat, app)
        nsys_trace_file = utils.get_nsys_gputrace_file(plat, app, batch)

        kernels = utils.read_nsys_trace(nsys_trace_file)
        kern_unames = set(k.name for k in kernels)

        all_kerns[plat] = all_kerns[plat].union(kern_unames)

        cols.append(f'{len(kernels)/1000:.1f}')
        cols.append(f'{len(kern_unames)}')
        cols.append(f'{len(all_kerns[plat])}')


    print(' & '.join(map(str, cols)), '\\\\')

print('\hline')
print('\\end{tabular}')
