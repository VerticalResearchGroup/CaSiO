#!/usr/bin/env python

import os
import sys
import utils

all_fw_ops = set()
all_kerns = {plat: set() for plat in utils.plats}


print('\\begin{tabular}{lrrrrrrrrrrrr}')
print(f' & \\multicolumn{{3}}{{c}}{{\\textbf{{Framework}}}} & \\multicolumn{{3}}{{c}}{{\\textbf{{P100}}}} & \\multicolumn{{3}}{{c}}{{\\textbf{{V100}}}} & \\multicolumn{{3}}{{c}}{{\\textbf{{A100}}}} \\\\')
print(f'\\textbf{{Op Name}} &', ' & '.join(['Dyn.', 'Uniq.', 'C. Uniq.']*4), '\\\\')
print('\\hline')
for app in utils.apps:
    # print()
    # print(f'{app}:')

    no_data = False
    optrace_file = f'{utils.CASIO}/casio-results/postproc/a100/{app}/op-trace-large-batch.csv'

    if not os.path.exists(optrace_file): continue

    trace = []
    with open(optrace_file) as f:
        for line in f:
            opname, accel_time_str = line.strip().split(',')
            accel_time = float(accel_time_str)
            trace.append(utils.FrameworkOp(
                utils.normalize_fw_opname(opname),
                accel_time
            ))

    if no_data: continue
    if sum(op.accel_time for op in trace) == 0: continue

    unqiue_op_names = set([ op.name for op in trace ])
    prettyname = utils.app_pretty_names[app].replace('_', '\\_')
    all_fw_ops = all_fw_ops.union(unqiue_op_names)
    cols = [
        prettyname,
        f'{len(trace)}',
        f'{len(unqiue_op_names)}',
        f'{len(all_fw_ops)}'
    ]

    for plat in utils.plats:
        batch = utils.get_large_batch_size(plat, app)
        nsys_trace_file = utils.get_nsys_gputrace_file(plat, app, batch)

        kernels = utils.read_nsys_trace(nsys_trace_file)
        kern_unames = set(k.name for k in kernels)

        all_kerns[plat] = all_kerns[plat].union(kern_unames)

        cols.append(f'{len(kernels)}')
        cols.append(f'{len(kern_unames)}')
        cols.append(f'{len(all_kerns[plat])}')


    print(' & '.join(map(str, cols)), '\\\\')

print('\\end{tabular}')
