#!/usr/bin/env python
import matplotlib.pyplot as plt
import seaborn as sns
import os
from scipy.spatial.distance import pdist
from scipy.spatial.distance import squareform
import sys
import numpy as np
import utils
import utils.cache
import bins
import scipy.stats

WIDTH = 1.0

colors = plt.rcParams['axes.prop_cycle'].by_key()['color']
colors = colors * 2
plat = sys.argv[1]
apps = utils.apps + ['gpt3']

fig, ax = plt.subplots(figsize=(utils.COL_WIDTH, 2))

@utils.cache.cache_pickle
def get_ncu_raw_data(plat, app):
    batch = utils.get_large_batch_size(plat, app)
    raw_file = utils.get_ncu_raw_file(plat, app, batch)

    if not os.path.exists(raw_file):
        print(f' {raw_file} does not exist')
        return []

    names, data = utils.read_ncu_raw_file_numpy(
        raw_file,
        [
            'gpu__time_duration.sum',
            'launch__thread_count',
            'sm__throughput.avg.pct_of_peak_sustained_elapsed',
            'gpu__dram_throughput.avg.pct_of_peak_sustained_elapsed',
        ])

    return names, data

def is_compute_kernel(name):
    return utils.is_gemm(name)

def is_mem_kernel(name):
    return not is_compute_kernel(name)

def speedup_ex_mem(name, time, ex=1.0, mem=1.0):
    if is_compute_kernel(name): return time / ex
    else: return time / mem

ex2x = []
mem2x = []
dep2x = []
all2x = []

def speedup(names, data, kbins, ex=1.0, mem=1.0, dep=1):
    ktimes = [
        speedup_ex_mem(names[i], data[i][0], ex, mem)
        for i in range(len(data))
    ]

    orig_time = sum(data[:, 0])

    new_time = 0
    run_lens = []
    i = 0
    while i < len(names):
        wbins = set()
        window = []
        j = 0
        while j < dep and i + j < len(names):
            if kbins[i + j] not in wbins:
                wbins.add(kbins[i + j])
                window.append(ktimes[i + j])
                j += 1
            else: break

        new_time += max(window)

        run_lens.append(j)
        i += j

    # print('    run_lens:', run_lens)

    return orig_time / new_time

labels = []

for i, app in enumerate(apps):
    batch = utils.get_large_batch_size(plat, app)
    raw_file = utils.get_ncu_raw_file(plat, app, batch)
    prettyname = utils.app_pretty_names[app]
    names, data = get_ncu_raw_data(plat, app)
    kbins = [
        bins.get_bin_str_vec(data[i])
        for i in range(len(data))
    ]

    labels.append(prettyname)

    print(prettyname)
    # print('    2xEx :', speedup(names, data, kbins, 2.0, 1.0, 1))
    # print('    2xMem:', speedup(names, data, kbins, 1.0, 2.0, 1))
    # print('    2xDep:', speedup(names, data, kbins, 1.0, 1.0, 2))
    # print('    2xEx,Mem:', speedup(names, data, kbins, 2.0, 2.0, 1))
    # print('    4xDep:', speedup(names, data, kbins, 1.0, 1.0, 4))
    print('    2xAll:', speedup(names, data, kbins, 2.0, 2.0, 2))
    # print('    2xEM, 4xD:', speedup(names, data, kbins, 2.0, 2.0, 4))
    print()

    ex2x.append(speedup(names, data, kbins, 2.0, 1.0, 1))
    mem2x.append(speedup(names, data, kbins, 1.0, 2.0, 1))
    dep2x.append(speedup(names, data, kbins, 1.0, 1.0, 2))
    all2x.append(speedup(names, data, kbins, 2.0, 2.0, 2))


ex2x = np.array(ex2x)
mem2x = np.array(mem2x)
dep2x = np.array(dep2x)
all2x = np.array(all2x)

ex2x = np.append(ex2x, scipy.stats.mstats.gmean(ex2x))
mem2x = np.append(mem2x, scipy.stats.mstats.gmean(mem2x))
dep2x = np.append(dep2x, scipy.stats.mstats.gmean(dep2x))
all2x = np.append(all2x, scipy.stats.mstats.gmean(all2x))
labels = np.append(labels, 'Geo. Mean')

fig = plt.figure(figsize=(utils.COL_WIDTH, 2))
axs = fig.subplots(1, 1)


xs = np.arange(len(apps) + 1) * 4

print(min(ex2x), np.round(ex2x , 2), max(ex2x))
print(min(mem2x), np.round(mem2x , 2), max(mem2x))
print(min(dep2x), np.round(dep2x , 2), max(dep2x))
print(min(all2x), np.round(all2x , 2), max(all2x))


axs.bar(xs + 0, ex2x, width=WIDTH, label='2x Compute')
axs.bar(xs + 1, mem2x, width=WIDTH, label='2x Data')
axs.bar(xs + 2, dep2x, width=WIDTH, label='2x Dependency', zorder=100)
axs.bar(xs + 2, all2x, width=WIDTH, label='2x All', zorder=10)




plt.xticks(xs + 0.5, labels, rotation=45, ha='right', fontsize=6)
plt.xlim([-WIDTH / 2, max(xs) + 3.5 - WIDTH])
plt.ylim([0, 4])
plt.yticks(fontsize=6)

# plt.xlabel('Application', fontsize=8)
plt.ylabel('Speedup', fontsize=8)
# plt.title('Generational Performance Gains', fontsize=10)
plt.legend(ncol=2, fontsize=6)
plt.tight_layout()
os.makedirs('charts', exist_ok=True)
plt.savefig('charts/walls.pdf')
