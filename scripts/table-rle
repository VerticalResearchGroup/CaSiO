#!/usr/bin/env python

import os
import sys
import utils
import bins
import numpy as np
import matplotlib.pyplot as plt

WINDOW_LEN = bins.NUM_BINS

plat = sys.argv[1]

glb_run_lengths = []


def multicol(text, n): return f'\\multicolumn{{{n}}}{{c}}{{{text}}}'
def bold(text): return f'\\textbf{{{text}}}'

SEP= ' & '

cols = {
    'header-1': [
        '',
        bold('Avg. Run Length')
    ],
}


for i, app in enumerate(utils.apps):
    batch = utils.get_large_batch_size(plat, app)
    raw_file = utils.get_ncu_raw_file(plat, app, batch)
    prettyname = utils.app_pretty_names[app]

    if not os.path.exists(raw_file):
        print(f' {raw_file} does not exist')
        print()
        continue

    names, data = utils.read_ncu_raw_file_numpy(
        raw_file,
        [
            'gpu__time_duration.sum',
            'launch__thread_count',
            'sm__throughput.avg.pct_of_peak_sustained_elapsed',
            'gpu__dram_throughput.avg.pct_of_peak_sustained_elapsed',
        ])

    ktimes = data[:, 0]
    kstats = data[:, 1:4]

    run_lengths = []
    cur_bin = None

    for i in range(len(names)):
        this_bin = bins.get_bin_str_vec(kstats[i])

        if this_bin == cur_bin:
            run_lengths[-1] += 1
        else:
            run_lengths.append(1)
            cur_bin = this_bin

    glb_run_lengths += run_lengths

    avg_run_length = np.mean(run_lengths)
    # print(f'{prettyname.ljust(15)}: {avg_run_length:.2f}')
    cols[app] = [prettyname, f'{avg_run_length:.2f}']

print('\\begin{tabular}{lrr}')
print('\\hline')
print(SEP.join(map(lambda s: s.ljust(15), cols['header-1'])), '\\\\ \\hline')

for app in utils.apps:
    print(SEP.join(map(lambda s: s.ljust(15), cols[app])), '\\\\')

print('\\hline')
print('\\end{tabular}')
