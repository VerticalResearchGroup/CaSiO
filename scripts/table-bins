#!/usr/bin/env python

import os
import sys
import utils
import numpy as np
import matplotlib.pyplot as plt

import bins

mask_cols = {'MLH', 'MHH', 'HHH', 'MMH'}

def multicol(text, n): return f'\\multicolumn{{{n}}}{{c}}{{{text}}}'
def bold(text): return f'\\textbf{{{text}}}'

SEP= ' & '

cols = {}

apps = utils.apps

fig = plt.figure(figsize=(6, len(apps) * 3))
axs = fig.subplots(len(apps), 1)

def format_col(s):
    return s.ljust(5)

cols['header-1'] = [''] + [
    bold(bstr) for bstr in bins.bin_str_to_idx.keys()
    if bstr not in mask_cols
]

plat = sys.argv[1]

for i, app in enumerate(utils.apps):
    batch = utils.get_large_batch_size(plat, app)
    raw_file = utils.get_ncu_raw_file(plat, app, batch)

    gemm_bins = {}
    nongemm_bins = {}

    prettyname = utils.app_pretty_names[app]
    # print(f'Processing {prettyname}...')

    if not os.path.exists(raw_file):
        print(f' {raw_file} does not exist')
        print(f' {raw_file} does not exist')
        print()
        continue

    names, data = utils.read_ncu_raw_file_numpy(
        raw_file,
        [
            'gpu__time_duration.sum',
            'launch__thread_count',
            'sm__throughput.avg.pct_of_peak_sustained_elapsed',
            'gpu__dram_throughput.avg.pct_of_peak_sustained_elapsed',
        ])

    ktimes = data[:, 0]

    kthreads = data[:, 1]
    ksm_pcts = data[:, 2]
    kmem_pcts = data[:, 3]
    kgemm = np.array([utils.is_gemm(k) for k in names])

    gemm_time = (ktimes * kgemm).sum()
    nongemm_time = (ktimes * (1 - kgemm)).sum()
    total_time = ktimes.sum()

    for k, t, thr, sm, mem, isgemm in zip(names, ktimes, kthreads, ksm_pcts, kmem_pcts, kgemm):
        bstr = bins.get_bin_str(thr, sm, mem)
        # print(b)
        if isgemm: gemm_bins[bstr] = gemm_bins.get(bstr, 0) + t
        else: nongemm_bins[bstr] = nongemm_bins.get(bstr, 0) + t

    col_gemm = [prettyname]
    col_nongemm = ['']
    for bstr in bins.bin_str_to_idx.keys():
        if bstr in mask_cols: continue
        gemm_frac = gemm_bins.get(bstr, 0) / gemm_time
        nongemm_frac = nongemm_bins.get(bstr, 0) / nongemm_time

        gemm_frac_str = '-' if gemm_frac == 0 else f'{gemm_frac:.2f}'
        nongemm_frac_str = '-' if nongemm_frac == 0 else f'{nongemm_frac:.2f}'

        col_gemm.append(gemm_frac_str)
        col_nongemm.append(nongemm_frac_str)

    cols[app + '-gemm'] = col_gemm
    cols[app + '-nongemm'] = col_nongemm

    # for thrb in ['L', 'M', 'H']:
    #     if thrb == 'L':
    #         gemm_time_ = 0
    #         nongemm_time_ = 0
    #         for smb in ['L', 'M', 'H']:
    #             for memb in ['L', 'M', 'H']:
    #                 b = thrb + smb + memb
    #                 gemm_time_ += gemm_bins.get(b, 0)
    #                 nongemm_time_ += nongemm_bins.get(b, 0)

    #         cols_gemm.append(format_col(f'{gemm_time_ / gemm_time:.2f}'))
    #         cols_nongemm.append(format_col(f'{nongemm_time_ / nongemm_time:.2f}'))
    #         continue

    #     for smb in ['L', 'M', 'H']:
    #         for memb in ['L', 'M', 'H']:
    #             b = f'{thrb}{smb}{memb}'
    #             gemm = gemm_bins.get(b, 0)
    #             nongemm = nongemm_bins.get(b, 0)
    #             if gemm / total_time * 100 > 0.5:
    #                 cols_gemm.append(f'{gemm / total_time * 100:.1f}')
    #             else:
    #                 cols_gemm.append('')

    #             if nongemm / total_time * 100 > 0.5:
    #                 cols_nongemm.append(f'{nongemm / total_time * 100:.1f}')
    #             else:
    #                 cols_nongemm.append('')


align_str = 'l' + 'c' * len(bins.bin_str_to_idx)
print(f'\\begin{{tabular}}{{{align_str}}}')
print('\\hline')
print(SEP.join(map(lambda s: s.ljust(15), cols['header-1'])), '\\\\ \\hline')

for app in utils.apps:
    print(SEP.join(map(lambda s: s.ljust(15), cols[app + '-gemm'])), '\\\\')
    print(SEP.join(map(lambda s: s.ljust(15), cols[app + '-nongemm'])), '\\\\')

print('\\hline')
print('\\end{tabular}')
