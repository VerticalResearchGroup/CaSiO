#!/usr/bin/env python
import matplotlib.pyplot as plt
import seaborn as sns
import os
from scipy.spatial.distance import pdist
from scipy.spatial.distance import squareform
import sys
import numpy as np
import utils

def shorten_string(s, lim=15):
    if len(s) > lim:
        return s[:lim - 3] + '...'
    return s

all_opcodes = set()
opcode_counts = {}
traces = {}
keep = 49

filter_by = sys.argv[1]

for app in utils.apps: #[:4]:
    batch = utils.get_large_batch_size('a100', app)
    sass_file = utils.get_ncu_sass_file('a100', app, batch)

    print(f'Processing {app}...')
    kernels = utils.parse_ncu_sass(sass_file)
    opcodes = utils.ncu_sass_opcodes(kernels)

    if filter_by == 'gemm':
        kernels = [k for k in kernels if utils.is_gemm(k.name)]
    elif filter_by == 'nongemm':
        kernels = [k for k in kernels if not utils.is_gemm(k.name)]

    total_insts = sum(i.thread_inst_exec for k in kernels for i in k.trace)

    for k in kernels:
        # if utils.is_gemm(k.name):
        for i in k.trace:
            if i.opcode not in opcode_counts:
                opcode_counts[i.opcode] = 0
            opcode_counts[i.opcode] += i.thread_inst_exec / total_insts

    all_opcodes = all_opcodes.union(opcodes)
    traces[app] = kernels


ordered_opcodes = list(all_opcodes)
ordered_opcodes.sort(key=lambda x: opcode_counts.get(x, 0), reverse=True)
print(f'Found {len(all_opcodes)} unique opcodes')


plt.figure(figsize=(6.5, 3))
plt.title('Opcode Mix')

xs = np.arange(len(all_opcodes)+1)[:keep + 1]

for app, trace in traces.items():
    app_opcode_counts = {opcode: 0 for opcode in all_opcodes}
    prettyname = utils.app_pretty_names[app]

    for k in trace:
        for i in k.trace:
            app_opcode_counts[i.opcode] += i.thread_inst_exec


    app_opcode_counts = np.array([app_opcode_counts.get(opcode, 0) for opcode in ordered_opcodes])
    cum_app_opcode_counts = np.cumsum(app_opcode_counts)[:keep]
    total_insts = np.sum(app_opcode_counts)
    cum_app_opcode_counts = np.append(cum_app_opcode_counts, total_insts)

    plt.plot(xs, cum_app_opcode_counts / total_insts, label=prettyname)

plt.legend(ncol=2, fontsize=6)
# plt.xlabel('Opcode')
plt.ylabel('Cum. Frac. of Instructions', fontsize=8)



plt.xticks(
    xs,
    list(map(shorten_string, ordered_opcodes))[:keep] + ['OTHER'],
    rotation=90,
    fontsize=6)

plt.yticks(fontsize=6)

plt.xlim(0, keep + 1)

plt.tight_layout()
os.makedirs('charts', exist_ok=True)
plt.savefig(f'charts/opcode-mix-{filter_by}.pdf')
